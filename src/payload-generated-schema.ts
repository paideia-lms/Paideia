/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  boolean,
  numeric,
  jsonb,
  type AnyPgColumn,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_users_role = pgEnum("enum_users_role", [
  "student",
  "instructor",
  "admin",
]);
export const enum_courses_status = pgEnum("enum_courses_status", [
  "draft",
  "published",
  "archived",
]);
export const enum_enrollments_role = pgEnum("enum_enrollments_role", [
  "student",
  "teacher",
  "ta",
  "manager",
]);
export const enum_enrollments_status = pgEnum("enum_enrollments_status", [
  "active",
  "inactive",
  "completed",
  "dropped",
]);
export const enum_activity_modules_type = pgEnum("enum_activity_modules_type", [
  "page",
  "whiteboard",
  "assignment",
  "quiz",
  "discussion",
]);
export const enum_activity_modules_status = pgEnum(
  "enum_activity_modules_status",
  ["draft", "published", "archived"],
);

export const users_sessions = pgTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    firstName: varchar("first_name"),
    lastName: varchar("last_name"),
    role: enum_users_role("role").default("student"),
    bio: varchar("bio"),
    avatar: integer("avatar_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    _verified: boolean("_verified"),
    _verificationToken: varchar("_verificationtoken"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_avatar_idx: index("users_avatar_idx").on(columns.avatar),
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const courses_tags = pgTable(
  "courses_tags",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    tag: varchar("tag"),
  },
  (columns) => ({
    _orderIdx: index("courses_tags_order_idx").on(columns._order),
    _parentIDIdx: index("courses_tags_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [courses.id],
      name: "courses_tags_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const courses = pgTable(
  "courses",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    slug: varchar("slug").notNull(),
    description: varchar("description").notNull(),
    structure: jsonb("structure").notNull(),
    status: enum_courses_status("status").notNull().default("draft"),
    thumbnail: integer("thumbnail_id").references(() => media.id, {
      onDelete: "set null",
    }),
    createdBy: integer("created_by_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    courses_slug_idx: uniqueIndex("courses_slug_idx").on(columns.slug),
    courses_thumbnail_idx: index("courses_thumbnail_idx").on(columns.thumbnail),
    courses_created_by_idx: index("courses_created_by_idx").on(
      columns.createdBy,
    ),
    courses_updated_at_idx: index("courses_updated_at_idx").on(
      columns.updatedAt,
    ),
    courses_created_at_idx: index("courses_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const enrollments = pgTable(
  "enrollments",
  {
    id: serial("id").primaryKey(),
    user: integer("user_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    course: integer("course_id")
      .notNull()
      .references(() => courses.id, {
        onDelete: "set null",
      }),
    role: enum_enrollments_role("role").notNull(),
    status: enum_enrollments_status("status").notNull().default("active"),
    enrolledAt: timestamp("enrolled_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    completedAt: timestamp("completed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    enrollments_user_idx: index("enrollments_user_idx").on(columns.user),
    enrollments_course_idx: index("enrollments_course_idx").on(columns.course),
    enrollments_updated_at_idx: index("enrollments_updated_at_idx").on(
      columns.updatedAt,
    ),
    enrollments_created_at_idx: index("enrollments_created_at_idx").on(
      columns.createdAt,
    ),
    user_course_idx: uniqueIndex("user_course_idx").on(
      columns.user,
      columns.course,
    ),
  }),
);

export const activity_modules = pgTable(
  "activity_modules",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description"),
    type: enum_activity_modules_type("type").notNull(),
    status: enum_activity_modules_status("status").notNull().default("draft"),
    createdBy: integer("created_by_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    activity_modules_created_by_idx: index(
      "activity_modules_created_by_idx",
    ).on(columns.createdBy),
    activity_modules_updated_at_idx: index(
      "activity_modules_updated_at_idx",
    ).on(columns.updatedAt),
    activity_modules_created_at_idx: index(
      "activity_modules_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const course_activity_module_links = pgTable(
  "course_activity_module_links",
  {
    id: serial("id").primaryKey(),
    course: integer("course_id")
      .notNull()
      .references(() => courses.id, {
        onDelete: "set null",
      }),
    activityModule: integer("activity_module_id")
      .notNull()
      .references(() => activity_modules.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    course_activity_module_links_course_idx: index(
      "course_activity_module_links_course_idx",
    ).on(columns.course),
    course_activity_module_links_activity_module_idx: index(
      "course_activity_module_links_activity_module_idx",
    ).on(columns.activityModule),
    course_activity_module_links_updated_at_idx: index(
      "course_activity_module_links_updated_at_idx",
    ).on(columns.updatedAt),
    course_activity_module_links_created_at_idx: index(
      "course_activity_module_links_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt"),
    caption: varchar("caption"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    sizes_thumbnail_url: varchar("sizes_thumbnail_url"),
    sizes_thumbnail_width: numeric("sizes_thumbnail_width"),
    sizes_thumbnail_height: numeric("sizes_thumbnail_height"),
    sizes_thumbnail_mimeType: varchar("sizes_thumbnail_mime_type"),
    sizes_thumbnail_filesize: numeric("sizes_thumbnail_filesize"),
    sizes_thumbnail_filename: varchar("sizes_thumbnail_filename"),
    sizes_card_url: varchar("sizes_card_url"),
    sizes_card_width: numeric("sizes_card_width"),
    sizes_card_height: numeric("sizes_card_height"),
    sizes_card_mimeType: varchar("sizes_card_mime_type"),
    sizes_card_filesize: numeric("sizes_card_filesize"),
    sizes_card_filename: varchar("sizes_card_filename"),
    sizes_tablet_url: varchar("sizes_tablet_url"),
    sizes_tablet_width: numeric("sizes_tablet_width"),
    sizes_tablet_height: numeric("sizes_tablet_height"),
    sizes_tablet_mimeType: varchar("sizes_tablet_mime_type"),
    sizes_tablet_filesize: numeric("sizes_tablet_filesize"),
    sizes_tablet_filename: varchar("sizes_tablet_filename"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      "media_sizes_thumbnail_sizes_thumbnail_filename_idx",
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_card_sizes_card_filename_idx: index(
      "media_sizes_card_sizes_card_filename_idx",
    ).on(columns.sizes_card_filename),
    media_sizes_tablet_sizes_tablet_filename_idx: index(
      "media_sizes_tablet_sizes_tablet_filename_idx",
    ).on(columns.sizes_tablet_filename),
  }),
);

export const notes = pgTable(
  "notes",
  {
    id: serial("id").primaryKey(),
    createdBy: integer("created_by_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    content: varchar("content").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    notes_created_by_idx: index("notes_created_by_idx").on(columns.createdBy),
    notes_updated_at_idx: index("notes_updated_at_idx").on(columns.updatedAt),
    notes_created_at_idx: index("notes_created_at_idx").on(columns.createdAt),
  }),
);

export const gradebooks = pgTable(
  "gradebooks",
  {
    id: serial("id").primaryKey(),
    course: integer("course_id")
      .notNull()
      .references(() => courses.id, {
        onDelete: "set null",
      }),
    enabled: boolean("enabled").default(true),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gradebooks_course_idx: index("gradebooks_course_idx").on(columns.course),
    gradebooks_updated_at_idx: index("gradebooks_updated_at_idx").on(
      columns.updatedAt,
    ),
    gradebooks_created_at_idx: index("gradebooks_created_at_idx").on(
      columns.createdAt,
    ),
    course_idx: uniqueIndex("course_idx").on(columns.course),
  }),
);

export const gradebook_categories = pgTable(
  "gradebook_categories",
  {
    id: serial("id").primaryKey(),
    gradebook: integer("gradebook_id")
      .notNull()
      .references(() => gradebooks.id, {
        onDelete: "set null",
      }),
    parent: integer("parent_id").references(
      (): AnyPgColumn => gradebook_categories.id,
      {
        onDelete: "set null",
      },
    ),
    name: varchar("name").notNull(),
    description: varchar("description"),
    weight: numeric("weight").default("0"),
    sortOrder: numeric("sort_order").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gradebook_categories_gradebook_idx: index(
      "gradebook_categories_gradebook_idx",
    ).on(columns.gradebook),
    gradebook_categories_parent_idx: index(
      "gradebook_categories_parent_idx",
    ).on(columns.parent),
    gradebook_categories_updated_at_idx: index(
      "gradebook_categories_updated_at_idx",
    ).on(columns.updatedAt),
    gradebook_categories_created_at_idx: index(
      "gradebook_categories_created_at_idx",
    ).on(columns.createdAt),
    gradebook_idx: index("gradebook_idx").on(columns.gradebook),
    parent_idx: index("parent_idx").on(columns.parent),
  }),
);

export const gradebook_items = pgTable(
  "gradebook_items",
  {
    id: serial("id").primaryKey(),
    gradebook: integer("gradebook_id")
      .notNull()
      .references(() => gradebooks.id, {
        onDelete: "set null",
      }),
    category: integer("category_id").references(() => gradebook_categories.id, {
      onDelete: "set null",
    }),
    name: varchar("name").notNull(),
    sortOrder: numeric("sort_order").notNull(),
    description: varchar("description"),
    activityModule: integer("activity_module_id").references(
      () => course_activity_module_links.id,
      {
        onDelete: "set null",
      },
    ),
    maxGrade: numeric("max_grade").notNull().default("100"),
    minGrade: numeric("min_grade").notNull().default("0"),
    weight: numeric("weight").notNull().default("0"),
    extraCredit: boolean("extra_credit").default(false),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gradebook_items_gradebook_idx: index("gradebook_items_gradebook_idx").on(
      columns.gradebook,
    ),
    gradebook_items_category_idx: index("gradebook_items_category_idx").on(
      columns.category,
    ),
    gradebook_items_activity_module_idx: index(
      "gradebook_items_activity_module_idx",
    ).on(columns.activityModule),
    gradebook_items_updated_at_idx: index("gradebook_items_updated_at_idx").on(
      columns.updatedAt,
    ),
    gradebook_items_created_at_idx: index("gradebook_items_created_at_idx").on(
      columns.createdAt,
    ),
    gradebook_1_idx: index("gradebook_1_idx").on(columns.gradebook),
    category_idx: index("category_idx").on(columns.category),
  }),
);

export const user_grades = pgTable(
  "user_grades",
  {
    id: serial("id").primaryKey(),
    enrollment: integer("enrollment_id")
      .notNull()
      .references(() => enrollments.id, {
        onDelete: "set null",
      }),
    gradebookItem: integer("gradebook_item_id")
      .notNull()
      .references(() => gradebook_items.id, {
        onDelete: "set null",
      }),
    grade: numeric("grade"),
    feedback: varchar("feedback"),
    gradedBy: integer("graded_by_id").references(() => users.id, {
      onDelete: "set null",
    }),
    gradedAt: timestamp("graded_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    submittedAt: timestamp("submitted_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    user_grades_enrollment_idx: index("user_grades_enrollment_idx").on(
      columns.enrollment,
    ),
    user_grades_gradebook_item_idx: index("user_grades_gradebook_item_idx").on(
      columns.gradebookItem,
    ),
    user_grades_graded_by_idx: index("user_grades_graded_by_idx").on(
      columns.gradedBy,
    ),
    user_grades_updated_at_idx: index("user_grades_updated_at_idx").on(
      columns.updatedAt,
    ),
    user_grades_created_at_idx: index("user_grades_created_at_idx").on(
      columns.createdAt,
    ),
    enrollment_gradebookItem_idx: uniqueIndex(
      "enrollment_gradebookItem_idx",
    ).on(columns.enrollment, columns.gradebookItem),
    gradebookItem_idx: index("gradebookItem_idx").on(columns.gradebookItem),
    enrollment_idx: index("enrollment_idx").on(columns.enrollment),
  }),
);

export const search = pgTable(
  "search",
  {
    id: serial("id").primaryKey(),
    title: varchar("title"),
    priority: numeric("priority"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_updated_at_idx: index("search_updated_at_idx").on(columns.updatedAt),
    search_created_at_idx: index("search_created_at_idx").on(columns.createdAt),
  }),
);

export const search_rels = pgTable(
  "search_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    coursesID: integer("courses_id"),
  },
  (columns) => ({
    order: index("search_rels_order_idx").on(columns.order),
    parentIdx: index("search_rels_parent_idx").on(columns.parent),
    pathIdx: index("search_rels_path_idx").on(columns.path),
    search_rels_users_id_idx: index("search_rels_users_id_idx").on(
      columns.usersID,
    ),
    search_rels_courses_id_idx: index("search_rels_courses_id_idx").on(
      columns.coursesID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [search.id],
      name: "search_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "search_rels_users_fk",
    }).onDelete("cascade"),
    coursesIdFk: foreignKey({
      columns: [columns["coursesID"]],
      foreignColumns: [courses.id],
      name: "search_rels_courses_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    coursesID: integer("courses_id"),
    enrollmentsID: integer("enrollments_id"),
    "activity-modulesID": integer("activity_modules_id"),
    "course-activity-module-linksID": integer(
      "course_activity_module_links_id",
    ),
    mediaID: integer("media_id"),
    notesID: integer("notes_id"),
    gradebooksID: integer("gradebooks_id"),
    "gradebook-categoriesID": integer("gradebook_categories_id"),
    "gradebook-itemsID": integer("gradebook_items_id"),
    "user-gradesID": integer("user_grades_id"),
    searchID: integer("search_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_courses_id_idx: index(
      "payload_locked_documents_rels_courses_id_idx",
    ).on(columns.coursesID),
    payload_locked_documents_rels_enrollments_id_idx: index(
      "payload_locked_documents_rels_enrollments_id_idx",
    ).on(columns.enrollmentsID),
    payload_locked_documents_rels_activity_modules_id_idx: index(
      "payload_locked_documents_rels_activity_modules_id_idx",
    ).on(columns["activity-modulesID"]),
    payload_locked_documents_rels_course_activity_module_lin_idx: index(
      "payload_locked_documents_rels_course_activity_module_lin_idx",
    ).on(columns["course-activity-module-linksID"]),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_notes_id_idx: index(
      "payload_locked_documents_rels_notes_id_idx",
    ).on(columns.notesID),
    payload_locked_documents_rels_gradebooks_id_idx: index(
      "payload_locked_documents_rels_gradebooks_id_idx",
    ).on(columns.gradebooksID),
    payload_locked_documents_rels_gradebook_categories_id_idx: index(
      "payload_locked_documents_rels_gradebook_categories_id_idx",
    ).on(columns["gradebook-categoriesID"]),
    payload_locked_documents_rels_gradebook_items_id_idx: index(
      "payload_locked_documents_rels_gradebook_items_id_idx",
    ).on(columns["gradebook-itemsID"]),
    payload_locked_documents_rels_user_grades_id_idx: index(
      "payload_locked_documents_rels_user_grades_id_idx",
    ).on(columns["user-gradesID"]),
    payload_locked_documents_rels_search_id_idx: index(
      "payload_locked_documents_rels_search_id_idx",
    ).on(columns.searchID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    coursesIdFk: foreignKey({
      columns: [columns["coursesID"]],
      foreignColumns: [courses.id],
      name: "payload_locked_documents_rels_courses_fk",
    }).onDelete("cascade"),
    enrollmentsIdFk: foreignKey({
      columns: [columns["enrollmentsID"]],
      foreignColumns: [enrollments.id],
      name: "payload_locked_documents_rels_enrollments_fk",
    }).onDelete("cascade"),
    "activity-modulesIdFk": foreignKey({
      columns: [columns["activity-modulesID"]],
      foreignColumns: [activity_modules.id],
      name: "payload_locked_documents_rels_activity_modules_fk",
    }).onDelete("cascade"),
    "course-activity-module-linksIdFk": foreignKey({
      columns: [columns["course-activity-module-linksID"]],
      foreignColumns: [course_activity_module_links.id],
      name: "payload_locked_documents_rels_course_activity_module_links_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    notesIdFk: foreignKey({
      columns: [columns["notesID"]],
      foreignColumns: [notes.id],
      name: "payload_locked_documents_rels_notes_fk",
    }).onDelete("cascade"),
    gradebooksIdFk: foreignKey({
      columns: [columns["gradebooksID"]],
      foreignColumns: [gradebooks.id],
      name: "payload_locked_documents_rels_gradebooks_fk",
    }).onDelete("cascade"),
    "gradebook-categoriesIdFk": foreignKey({
      columns: [columns["gradebook-categoriesID"]],
      foreignColumns: [gradebook_categories.id],
      name: "payload_locked_documents_rels_gradebook_categories_fk",
    }).onDelete("cascade"),
    "gradebook-itemsIdFk": foreignKey({
      columns: [columns["gradebook-itemsID"]],
      foreignColumns: [gradebook_items.id],
      name: "payload_locked_documents_rels_gradebook_items_fk",
    }).onDelete("cascade"),
    "user-gradesIdFk": foreignKey({
      columns: [columns["user-gradesID"]],
      foreignColumns: [user_grades.id],
      name: "payload_locked_documents_rels_user_grades_fk",
    }).onDelete("cascade"),
    searchIdFk: foreignKey({
      columns: [columns["searchID"]],
      foreignColumns: [search.id],
      name: "payload_locked_documents_rels_search_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ one, many }) => ({
  avatar: one(media, {
    fields: [users.avatar],
    references: [media.id],
    relationName: "avatar",
  }),
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_courses_tags = relations(courses_tags, ({ one }) => ({
  _parentID: one(courses, {
    fields: [courses_tags._parentID],
    references: [courses.id],
    relationName: "tags",
  }),
}));
export const relations_courses = relations(courses, ({ one, many }) => ({
  thumbnail: one(media, {
    fields: [courses.thumbnail],
    references: [media.id],
    relationName: "thumbnail",
  }),
  tags: many(courses_tags, {
    relationName: "tags",
  }),
  createdBy: one(users, {
    fields: [courses.createdBy],
    references: [users.id],
    relationName: "createdBy",
  }),
}));
export const relations_enrollments = relations(enrollments, ({ one }) => ({
  user: one(users, {
    fields: [enrollments.user],
    references: [users.id],
    relationName: "user",
  }),
  course: one(courses, {
    fields: [enrollments.course],
    references: [courses.id],
    relationName: "course",
  }),
}));
export const relations_activity_modules = relations(
  activity_modules,
  ({ one }) => ({
    createdBy: one(users, {
      fields: [activity_modules.createdBy],
      references: [users.id],
      relationName: "createdBy",
    }),
  }),
);
export const relations_course_activity_module_links = relations(
  course_activity_module_links,
  ({ one }) => ({
    course: one(courses, {
      fields: [course_activity_module_links.course],
      references: [courses.id],
      relationName: "course",
    }),
    activityModule: one(activity_modules, {
      fields: [course_activity_module_links.activityModule],
      references: [activity_modules.id],
      relationName: "activityModule",
    }),
  }),
);
export const relations_media = relations(media, () => ({}));
export const relations_notes = relations(notes, ({ one }) => ({
  createdBy: one(users, {
    fields: [notes.createdBy],
    references: [users.id],
    relationName: "createdBy",
  }),
}));
export const relations_gradebooks = relations(gradebooks, ({ one }) => ({
  course: one(courses, {
    fields: [gradebooks.course],
    references: [courses.id],
    relationName: "course",
  }),
}));
export const relations_gradebook_categories = relations(
  gradebook_categories,
  ({ one }) => ({
    gradebook: one(gradebooks, {
      fields: [gradebook_categories.gradebook],
      references: [gradebooks.id],
      relationName: "gradebook",
    }),
    parent: one(gradebook_categories, {
      fields: [gradebook_categories.parent],
      references: [gradebook_categories.id],
      relationName: "parent",
    }),
  }),
);
export const relations_gradebook_items = relations(
  gradebook_items,
  ({ one }) => ({
    gradebook: one(gradebooks, {
      fields: [gradebook_items.gradebook],
      references: [gradebooks.id],
      relationName: "gradebook",
    }),
    category: one(gradebook_categories, {
      fields: [gradebook_items.category],
      references: [gradebook_categories.id],
      relationName: "category",
    }),
    activityModule: one(course_activity_module_links, {
      fields: [gradebook_items.activityModule],
      references: [course_activity_module_links.id],
      relationName: "activityModule",
    }),
  }),
);
export const relations_user_grades = relations(user_grades, ({ one }) => ({
  enrollment: one(enrollments, {
    fields: [user_grades.enrollment],
    references: [enrollments.id],
    relationName: "enrollment",
  }),
  gradebookItem: one(gradebook_items, {
    fields: [user_grades.gradebookItem],
    references: [gradebook_items.id],
    relationName: "gradebookItem",
  }),
  gradedBy: one(users, {
    fields: [user_grades.gradedBy],
    references: [users.id],
    relationName: "gradedBy",
  }),
}));
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: "_rels",
  }),
  usersID: one(users, {
    fields: [search_rels.usersID],
    references: [users.id],
    relationName: "users",
  }),
  coursesID: one(courses, {
    fields: [search_rels.coursesID],
    references: [courses.id],
    relationName: "courses",
  }),
}));
export const relations_search = relations(search, ({ many }) => ({
  _rels: many(search_rels, {
    relationName: "_rels",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    coursesID: one(courses, {
      fields: [payload_locked_documents_rels.coursesID],
      references: [courses.id],
      relationName: "courses",
    }),
    enrollmentsID: one(enrollments, {
      fields: [payload_locked_documents_rels.enrollmentsID],
      references: [enrollments.id],
      relationName: "enrollments",
    }),
    "activity-modulesID": one(activity_modules, {
      fields: [payload_locked_documents_rels["activity-modulesID"]],
      references: [activity_modules.id],
      relationName: "activity-modules",
    }),
    "course-activity-module-linksID": one(course_activity_module_links, {
      fields: [payload_locked_documents_rels["course-activity-module-linksID"]],
      references: [course_activity_module_links.id],
      relationName: "course-activity-module-links",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    notesID: one(notes, {
      fields: [payload_locked_documents_rels.notesID],
      references: [notes.id],
      relationName: "notes",
    }),
    gradebooksID: one(gradebooks, {
      fields: [payload_locked_documents_rels.gradebooksID],
      references: [gradebooks.id],
      relationName: "gradebooks",
    }),
    "gradebook-categoriesID": one(gradebook_categories, {
      fields: [payload_locked_documents_rels["gradebook-categoriesID"]],
      references: [gradebook_categories.id],
      relationName: "gradebook-categories",
    }),
    "gradebook-itemsID": one(gradebook_items, {
      fields: [payload_locked_documents_rels["gradebook-itemsID"]],
      references: [gradebook_items.id],
      relationName: "gradebook-items",
    }),
    "user-gradesID": one(user_grades, {
      fields: [payload_locked_documents_rels["user-gradesID"]],
      references: [user_grades.id],
      relationName: "user-grades",
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: "search",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role;
  enum_courses_status: typeof enum_courses_status;
  enum_enrollments_role: typeof enum_enrollments_role;
  enum_enrollments_status: typeof enum_enrollments_status;
  enum_activity_modules_type: typeof enum_activity_modules_type;
  enum_activity_modules_status: typeof enum_activity_modules_status;
  users_sessions: typeof users_sessions;
  users: typeof users;
  courses_tags: typeof courses_tags;
  courses: typeof courses;
  enrollments: typeof enrollments;
  activity_modules: typeof activity_modules;
  course_activity_module_links: typeof course_activity_module_links;
  media: typeof media;
  notes: typeof notes;
  gradebooks: typeof gradebooks;
  gradebook_categories: typeof gradebook_categories;
  gradebook_items: typeof gradebook_items;
  user_grades: typeof user_grades;
  search: typeof search;
  search_rels: typeof search_rels;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_courses_tags: typeof relations_courses_tags;
  relations_courses: typeof relations_courses;
  relations_enrollments: typeof relations_enrollments;
  relations_activity_modules: typeof relations_activity_modules;
  relations_course_activity_module_links: typeof relations_course_activity_module_links;
  relations_media: typeof relations_media;
  relations_notes: typeof relations_notes;
  relations_gradebooks: typeof relations_gradebooks;
  relations_gradebook_categories: typeof relations_gradebook_categories;
  relations_gradebook_items: typeof relations_gradebook_items;
  relations_user_grades: typeof relations_user_grades;
  relations_search_rels: typeof relations_search_rels;
  relations_search: typeof relations_search;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
