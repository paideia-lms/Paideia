import * as Schemas from "./utils/schema";
/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    courses: Course;
    'course-categories': CourseCategory;
    'category-role-assignments': CategoryRoleAssignment;
    enrollments: Enrollment;
    'activity-modules': ActivityModule;
    'activity-module-grants': ActivityModuleGrant;
    assignments: Assignment;
    quizzes: Quiz;
    discussions: Discussion;
    'course-activity-module-links': CourseActivityModuleLink;
    media: Media;
    notes: Note;
    gradebooks: Gradebook;
    'gradebook-categories': GradebookCategory;
    'gradebook-items': GradebookItem;
    'assignment-submissions': AssignmentSubmission;
    'quiz-submissions': QuizSubmission;
    'discussion-submissions': DiscussionSubmission;
    'course-grade-tables': CourseGradeTable;
    groups: Group;
    'user-grades': UserGrade;
    search: Search;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    courses: {
      gradeTable: 'course-grade-tables';
      enrollments: 'enrollments';
      groups: 'groups';
    };
    'course-categories': {
      subcategories: 'course-categories';
      courses: 'courses';
    };
    'activity-modules': {
      submissions: 'assignment-submissions';
      quizSubmissions: 'quiz-submissions';
      discussionSubmissions: 'discussion-submissions';
      grants: 'activity-module-grants';
    };
    gradebooks: {
      categories: 'gradebook-categories';
      items: 'gradebook-items';
    };
    'gradebook-categories': {
      subcategories: 'gradebook-categories';
      items: 'gradebook-items';
    };
    'gradebook-items': {
      userGrades: 'user-grades';
    };
    'discussion-submissions': {
      replies: 'discussion-submissions';
    };
    groups: {
      enrollments: 'enrollments';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    'course-categories': CourseCategoriesSelect<false> | CourseCategoriesSelect<true>;
    'category-role-assignments': CategoryRoleAssignmentsSelect<false> | CategoryRoleAssignmentsSelect<true>;
    enrollments: EnrollmentsSelect<false> | EnrollmentsSelect<true>;
    'activity-modules': ActivityModulesSelect<false> | ActivityModulesSelect<true>;
    'activity-module-grants': ActivityModuleGrantsSelect<false> | ActivityModuleGrantsSelect<true>;
    assignments: AssignmentsSelect<false> | AssignmentsSelect<true>;
    quizzes: QuizzesSelect<false> | QuizzesSelect<true>;
    discussions: DiscussionsSelect<false> | DiscussionsSelect<true>;
    'course-activity-module-links': CourseActivityModuleLinksSelect<false> | CourseActivityModuleLinksSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    notes: NotesSelect<false> | NotesSelect<true>;
    gradebooks: GradebooksSelect<false> | GradebooksSelect<true>;
    'gradebook-categories': GradebookCategoriesSelect<false> | GradebookCategoriesSelect<true>;
    'gradebook-items': GradebookItemsSelect<false> | GradebookItemsSelect<true>;
    'assignment-submissions': AssignmentSubmissionsSelect<false> | AssignmentSubmissionsSelect<true>;
    'quiz-submissions': QuizSubmissionsSelect<false> | QuizSubmissionsSelect<true>;
    'discussion-submissions': DiscussionSubmissionsSelect<false> | DiscussionSubmissionsSelect<true>;
    'course-grade-tables': CourseGradeTablesSelect<false> | CourseGradeTablesSelect<true>;
    groups: GroupsSelect<false> | GroupsSelect<true>;
    'user-grades': UserGradesSelect<false> | UserGradesSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'system-grade-table': SystemGradeTable;
  };
  globalsSelect: {
    'system-grade-table': SystemGradeTableSelect<false> | SystemGradeTableSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName?: string | null;
  lastName?: string | null;
  role?: ('student' | 'instructor' | 'admin') | null;
  bio?: string | null;
  avatar?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  title: string;
  slug: string;
  description: string;
  structure: Schemas.CourseStructure;
  status: 'draft' | 'published' | 'archived';
  thumbnail?: (number | null) | Media;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  createdBy: number | User;
  gradeTable?: {
    docs?: (number | CourseGradeTable)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  enrollments?: {
    docs?: (number | Enrollment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  groups?: {
    docs?: (number | Group)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  category?: (number | null) | CourseCategory;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-grade-tables".
 */
export interface CourseGradeTable {
  id: number;
  course: number | Course;
  courseTitle?: string | null;
  gradeLetters?:
    | {
        letter: string;
        minimumPercentage: number;
        id?: string | null;
      }[]
    | null;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments".
 */
export interface Enrollment {
  id: number;
  user: number | User;
  userEmail?: string | null;
  course: number | Course;
  courseSlug?: string | null;
  courseTitle?: string | null;
  role: 'student' | 'teacher' | 'ta' | 'manager';
  status: 'active' | 'inactive' | 'completed' | 'dropped';
  enrolledAt?: string | null;
  completedAt?: string | null;
  groups?: (number | Group)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups".
 */
export interface Group {
  id: number;
  name: string;
  course: number | Course;
  parent?: (number | null) | Group;
  path: string;
  description?: string | null;
  color?: string | null;
  maxMembers?: number | null;
  isActive?: boolean | null;
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  enrollments?: {
    docs?: (number | Enrollment)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-categories".
 */
export interface CourseCategory {
  id: number;
  name: string;
  /**
   * Optional parent category for nested organization
   */
  parent?: (number | null) | CourseCategory;
  subcategories?: {
    docs?: (number | CourseCategory)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  courses?: {
    docs?: (number | Course)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "category-role-assignments".
 */
export interface CategoryRoleAssignment {
  id: number;
  user: number | User;
  category: number | CourseCategory;
  /**
   * Category Admin: Manages category settings, nested subcategories, and direct courses. Category Coordinator: Assigns roles within category, monitors course counts. Category Reviewer: Views analytics and content without edit rights.
   */
  role: 'category-admin' | 'category-coordinator' | 'category-reviewer';
  assignedBy: number | User;
  assignedAt?: string | null;
  /**
   * Optional notes about why this role was assigned
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-modules".
 */
export interface ActivityModule {
  id: number;
  /**
   * The owner has full control including deletion. Cannot be changed directly - use ownership transfer function.
   */
  owner: number | User;
  title: string;
  description?: string | null;
  type: 'page' | 'whiteboard' | 'assignment' | 'quiz' | 'discussion';
  status: 'draft' | 'published' | 'archived';
  createdBy: number | User;
  requirePassword?: boolean | null;
  accessPassword?: string | null;
  assignment?: (number | null) | Assignment;
  quiz?: (number | null) | Quiz;
  discussion?: (number | null) | Discussion;
  submissions?: {
    docs?: (number | AssignmentSubmission)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  quizSubmissions?: {
    docs?: (number | QuizSubmission)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  discussionSubmissions?: {
    docs?: (number | DiscussionSubmission)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  grants?: {
    docs?: (number | ActivityModuleGrant)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assignments".
 */
export interface Assignment {
  id: number;
  title: string;
  description?: string | null;
  instructions?: string | null;
  dueDate?: string | null;
  maxAttempts?: number | null;
  allowLateSubmissions?: boolean | null;
  allowedFileTypes?:
    | {
        extension: string;
        mimeType: string;
        id?: string | null;
      }[]
    | null;
  maxFileSize?: number | null;
  maxFiles?: number | null;
  requireTextSubmission?: boolean | null;
  requireFileSubmission?: boolean | null;
  createdBy: number | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quizzes".
 */
export interface Quiz {
  id: number;
  title: string;
  description?: string | null;
  instructions?: string | null;
  dueDate?: string | null;
  maxAttempts?: number | null;
  allowLateSubmissions?: boolean | null;
  points?: number | null;
  gradingType?: ('automatic' | 'manual') | null;
  timeLimit?: number | null;
  showCorrectAnswers?: boolean | null;
  allowMultipleAttempts?: boolean | null;
  shuffleQuestions?: boolean | null;
  shuffleAnswers?: boolean | null;
  showOneQuestionAtATime?: boolean | null;
  requirePassword?: boolean | null;
  accessPassword?: string | null;
  questions?:
    | {
        questionText: string;
        questionType:
          | 'multiple_choice'
          | 'true_false'
          | 'short_answer'
          | 'essay'
          | 'fill_blank'
          | 'matching'
          | 'ordering';
        points: number;
        options?:
          | {
              text: string;
              isCorrect?: boolean | null;
              feedback?: string | null;
              id?: string | null;
            }[]
          | null;
        correctAnswer?: string | null;
        explanation?: string | null;
        hints?:
          | {
              hint: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  createdBy: number | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussions".
 */
export interface Discussion {
  id: number;
  title: string;
  description?: string | null;
  instructions?: string | null;
  dueDate?: string | null;
  requireThread?: boolean | null;
  requireReplies?: boolean | null;
  minReplies?: number | null;
  minWordsPerPost?: number | null;
  allowAttachments?: boolean | null;
  allowUpvotes?: boolean | null;
  allowEditing?: boolean | null;
  allowDeletion?: boolean | null;
  moderationRequired?: boolean | null;
  anonymousPosting?: boolean | null;
  groupDiscussion?: boolean | null;
  maxGroupSize?: number | null;
  threadSorting?: ('recent' | 'upvoted' | 'active' | 'alphabetical') | null;
  pinnedThreads?:
    | {
        thread: number | DiscussionSubmission;
        pinnedAt: string;
        pinnedBy: number | User;
        id?: string | null;
      }[]
    | null;
  createdBy: number | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion-submissions".
 */
export interface DiscussionSubmission {
  id: number;
  activityModule: number | ActivityModule;
  discussion: number | Discussion;
  discussionTitle?: string | null;
  student: number | User;
  studentEmail?: string | null;
  studentName?: string | null;
  enrollment: number | Enrollment;
  course?: string | null;
  courseTitle?: string | null;
  parentThread?: (number | null) | DiscussionSubmission;
  postType: 'thread' | 'reply' | 'comment';
  title?: string | null;
  content: string;
  attachments?:
    | {
        file: number | Media;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  status: 'draft' | 'published' | 'hidden' | 'deleted';
  publishedAt?: string | null;
  editedAt?: string | null;
  isEdited?: boolean | null;
  replies?: {
    docs?: (number | DiscussionSubmission)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  upvotes?:
    | {
        user: number | User;
        upvotedAt: string;
        id?: string | null;
      }[]
    | null;
  lastActivityAt?: string | null;
  isPinned?: boolean | null;
  isLocked?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assignment-submissions".
 */
export interface AssignmentSubmission {
  id: number;
  activityModule: number | ActivityModule;
  assignment: number | Assignment;
  assignmentTitle?: string | null;
  student: number | User;
  studentEmail?: string | null;
  studentName?: string | null;
  enrollment: number | Enrollment;
  course?: string | null;
  courseTitle?: string | null;
  attemptNumber: number;
  status: 'draft' | 'submitted' | 'graded' | 'returned';
  submittedAt?: string | null;
  content?: string | null;
  attachments?:
    | {
        file: number | Media;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  isLate?: boolean | null;
  timeSpent?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz-submissions".
 */
export interface QuizSubmission {
  id: number;
  activityModule: number | ActivityModule;
  quiz: number | Quiz;
  quizTitle?: string | null;
  student: number | User;
  studentEmail?: string | null;
  studentName?: string | null;
  enrollment: number | Enrollment;
  course?: string | null;
  courseTitle?: string | null;
  attemptNumber: number;
  status: 'in_progress' | 'completed' | 'graded' | 'returned';
  startedAt?: string | null;
  submittedAt?: string | null;
  timeLimit?: number | null;
  timeSpent?: number | null;
  answers?:
    | {
        questionId: string;
        questionText?: string | null;
        questionType: 'multiple_choice' | 'true_false' | 'short_answer' | 'essay' | 'fill_blank';
        selectedAnswer?: string | null;
        multipleChoiceAnswers?:
          | {
              option: string;
              isSelected?: boolean | null;
              id?: string | null;
            }[]
          | null;
        isCorrect?: boolean | null;
        pointsEarned?: number | null;
        maxPoints?: number | null;
        feedback?: string | null;
        id?: string | null;
      }[]
    | null;
  totalScore?: number | null;
  maxScore?: number | null;
  percentage?: number | null;
  isLate?: boolean | null;
  autoGraded?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-module-grants".
 */
export interface ActivityModuleGrant {
  id: number;
  activityModule: number | ActivityModule;
  grantedTo: number | User;
  grantedBy: number | User;
  grantedAt: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-activity-module-links".
 */
export interface CourseActivityModuleLink {
  id: number;
  course: number | Course;
  courseName?: string | null;
  courseSlug?: string | null;
  activityModule: number | ActivityModule;
  activityModuleName?: string[] | null;
  activityModuleType?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notes".
 */
export interface Note {
  id: number;
  createdBy: number | User;
  content: string;
  isPublic?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gradebooks".
 */
export interface Gradebook {
  id: number;
  course: number | Course;
  courseTitle?: string | null;
  enabled?: boolean | null;
  categories?: {
    docs?: (number | GradebookCategory)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  items?: {
    docs?: (number | GradebookItem)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gradebook-categories".
 */
export interface GradebookCategory {
  id: number;
  gradebook: number | Gradebook;
  parent?: (number | null) | GradebookCategory;
  name: string;
  description?: string | null;
  weight?: number | null;
  sortOrder: number;
  subcategories?: {
    docs?: (number | GradebookCategory)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  items?: {
    docs?: (number | GradebookItem)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gradebook-items".
 */
export interface GradebookItem {
  id: number;
  gradebook: number | Gradebook;
  category?: (number | null) | GradebookCategory;
  name: string;
  sortOrder: number;
  description?: string | null;
  activityModule?: (number | null) | CourseActivityModuleLink;
  activityModuleName?: string | null;
  activityModuleType?: string | null;
  maxGrade: number;
  minGrade: number;
  weight: number;
  extraCredit?: boolean | null;
  userGrades?: {
    docs?: (number | UserGrade)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-grades".
 */
export interface UserGrade {
  id: number;
  enrollment: number | Enrollment;
  user?: string | null;
  userEmail?: string | null;
  course?: string | null;
  courseTitle?: string | null;
  gradebookItem: number | GradebookItem;
  maxGrade?: number | null;
  submission?:
    | ({
        relationTo: 'assignment-submissions';
        value: number | AssignmentSubmission;
      } | null)
    | ({
        relationTo: 'quiz-submissions';
        value: number | QuizSubmission;
      } | null)
    | ({
        relationTo: 'discussion-submissions';
        value: number | DiscussionSubmission;
      } | null);
  submissionType?: ('assignment' | 'quiz' | 'discussion' | 'manual') | null;
  baseGrade?: number | null;
  baseGradeSource?: ('submission' | 'manual') | null;
  adjustments?:
    | {
        type: 'bonus' | 'penalty' | 'late_deduction' | 'participation' | 'curve' | 'other';
        points: number;
        reason: string;
        appliedBy: number | User;
        appliedAt: string;
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  isOverridden?: boolean | null;
  overrideGrade?: number | null;
  overrideReason?: string | null;
  overriddenBy?: (number | null) | User;
  overriddenAt?: string | null;
  feedback?: string | null;
  gradedBy?: (number | null) | User;
  gradedAt?: string | null;
  submittedAt?: string | null;
  status?: ('draft' | 'graded' | 'returned') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'courses';
        value: number | Course;
      };
  meta?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'course-categories';
        value: number | CourseCategory;
      } | null)
    | ({
        relationTo: 'category-role-assignments';
        value: number | CategoryRoleAssignment;
      } | null)
    | ({
        relationTo: 'enrollments';
        value: number | Enrollment;
      } | null)
    | ({
        relationTo: 'activity-modules';
        value: number | ActivityModule;
      } | null)
    | ({
        relationTo: 'activity-module-grants';
        value: number | ActivityModuleGrant;
      } | null)
    | ({
        relationTo: 'assignments';
        value: number | Assignment;
      } | null)
    | ({
        relationTo: 'quizzes';
        value: number | Quiz;
      } | null)
    | ({
        relationTo: 'discussions';
        value: number | Discussion;
      } | null)
    | ({
        relationTo: 'course-activity-module-links';
        value: number | CourseActivityModuleLink;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'notes';
        value: number | Note;
      } | null)
    | ({
        relationTo: 'gradebooks';
        value: number | Gradebook;
      } | null)
    | ({
        relationTo: 'gradebook-categories';
        value: number | GradebookCategory;
      } | null)
    | ({
        relationTo: 'gradebook-items';
        value: number | GradebookItem;
      } | null)
    | ({
        relationTo: 'assignment-submissions';
        value: number | AssignmentSubmission;
      } | null)
    | ({
        relationTo: 'quiz-submissions';
        value: number | QuizSubmission;
      } | null)
    | ({
        relationTo: 'discussion-submissions';
        value: number | DiscussionSubmission;
      } | null)
    | ({
        relationTo: 'course-grade-tables';
        value: number | CourseGradeTable;
      } | null)
    | ({
        relationTo: 'groups';
        value: number | Group;
      } | null)
    | ({
        relationTo: 'user-grades';
        value: number | UserGrade;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  role?: T;
  bio?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  structure?: T;
  status?: T;
  thumbnail?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  createdBy?: T;
  gradeTable?: T;
  enrollments?: T;
  groups?: T;
  category?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-categories_select".
 */
export interface CourseCategoriesSelect<T extends boolean = true> {
  name?: T;
  parent?: T;
  subcategories?: T;
  courses?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "category-role-assignments_select".
 */
export interface CategoryRoleAssignmentsSelect<T extends boolean = true> {
  user?: T;
  category?: T;
  role?: T;
  assignedBy?: T;
  assignedAt?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments_select".
 */
export interface EnrollmentsSelect<T extends boolean = true> {
  user?: T;
  userEmail?: T;
  course?: T;
  courseSlug?: T;
  courseTitle?: T;
  role?: T;
  status?: T;
  enrolledAt?: T;
  completedAt?: T;
  groups?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-modules_select".
 */
export interface ActivityModulesSelect<T extends boolean = true> {
  owner?: T;
  title?: T;
  description?: T;
  type?: T;
  status?: T;
  createdBy?: T;
  requirePassword?: T;
  accessPassword?: T;
  assignment?: T;
  quiz?: T;
  discussion?: T;
  submissions?: T;
  quizSubmissions?: T;
  discussionSubmissions?: T;
  grants?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity-module-grants_select".
 */
export interface ActivityModuleGrantsSelect<T extends boolean = true> {
  activityModule?: T;
  grantedTo?: T;
  grantedBy?: T;
  grantedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assignments_select".
 */
export interface AssignmentsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  instructions?: T;
  dueDate?: T;
  maxAttempts?: T;
  allowLateSubmissions?: T;
  allowedFileTypes?:
    | T
    | {
        extension?: T;
        mimeType?: T;
        id?: T;
      };
  maxFileSize?: T;
  maxFiles?: T;
  requireTextSubmission?: T;
  requireFileSubmission?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quizzes_select".
 */
export interface QuizzesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  instructions?: T;
  dueDate?: T;
  maxAttempts?: T;
  allowLateSubmissions?: T;
  points?: T;
  gradingType?: T;
  timeLimit?: T;
  showCorrectAnswers?: T;
  allowMultipleAttempts?: T;
  shuffleQuestions?: T;
  shuffleAnswers?: T;
  showOneQuestionAtATime?: T;
  requirePassword?: T;
  accessPassword?: T;
  questions?:
    | T
    | {
        questionText?: T;
        questionType?: T;
        points?: T;
        options?:
          | T
          | {
              text?: T;
              isCorrect?: T;
              feedback?: T;
              id?: T;
            };
        correctAnswer?: T;
        explanation?: T;
        hints?:
          | T
          | {
              hint?: T;
              id?: T;
            };
        id?: T;
      };
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussions_select".
 */
export interface DiscussionsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  instructions?: T;
  dueDate?: T;
  requireThread?: T;
  requireReplies?: T;
  minReplies?: T;
  minWordsPerPost?: T;
  allowAttachments?: T;
  allowUpvotes?: T;
  allowEditing?: T;
  allowDeletion?: T;
  moderationRequired?: T;
  anonymousPosting?: T;
  groupDiscussion?: T;
  maxGroupSize?: T;
  threadSorting?: T;
  pinnedThreads?:
    | T
    | {
        thread?: T;
        pinnedAt?: T;
        pinnedBy?: T;
        id?: T;
      };
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-activity-module-links_select".
 */
export interface CourseActivityModuleLinksSelect<T extends boolean = true> {
  course?: T;
  courseName?: T;
  courseSlug?: T;
  activityModule?: T;
  activityModuleName?: T;
  activityModuleType?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notes_select".
 */
export interface NotesSelect<T extends boolean = true> {
  createdBy?: T;
  content?: T;
  isPublic?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gradebooks_select".
 */
export interface GradebooksSelect<T extends boolean = true> {
  course?: T;
  courseTitle?: T;
  enabled?: T;
  categories?: T;
  items?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gradebook-categories_select".
 */
export interface GradebookCategoriesSelect<T extends boolean = true> {
  gradebook?: T;
  parent?: T;
  name?: T;
  description?: T;
  weight?: T;
  sortOrder?: T;
  subcategories?: T;
  items?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gradebook-items_select".
 */
export interface GradebookItemsSelect<T extends boolean = true> {
  gradebook?: T;
  category?: T;
  name?: T;
  sortOrder?: T;
  description?: T;
  activityModule?: T;
  activityModuleName?: T;
  activityModuleType?: T;
  maxGrade?: T;
  minGrade?: T;
  weight?: T;
  extraCredit?: T;
  userGrades?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assignment-submissions_select".
 */
export interface AssignmentSubmissionsSelect<T extends boolean = true> {
  activityModule?: T;
  assignment?: T;
  assignmentTitle?: T;
  student?: T;
  studentEmail?: T;
  studentName?: T;
  enrollment?: T;
  course?: T;
  courseTitle?: T;
  attemptNumber?: T;
  status?: T;
  submittedAt?: T;
  content?: T;
  attachments?:
    | T
    | {
        file?: T;
        description?: T;
        id?: T;
      };
  isLate?: T;
  timeSpent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quiz-submissions_select".
 */
export interface QuizSubmissionsSelect<T extends boolean = true> {
  activityModule?: T;
  quiz?: T;
  quizTitle?: T;
  student?: T;
  studentEmail?: T;
  studentName?: T;
  enrollment?: T;
  course?: T;
  courseTitle?: T;
  attemptNumber?: T;
  status?: T;
  startedAt?: T;
  submittedAt?: T;
  timeLimit?: T;
  timeSpent?: T;
  answers?:
    | T
    | {
        questionId?: T;
        questionText?: T;
        questionType?: T;
        selectedAnswer?: T;
        multipleChoiceAnswers?:
          | T
          | {
              option?: T;
              isSelected?: T;
              id?: T;
            };
        isCorrect?: T;
        pointsEarned?: T;
        maxPoints?: T;
        feedback?: T;
        id?: T;
      };
  totalScore?: T;
  maxScore?: T;
  percentage?: T;
  isLate?: T;
  autoGraded?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion-submissions_select".
 */
export interface DiscussionSubmissionsSelect<T extends boolean = true> {
  activityModule?: T;
  discussion?: T;
  discussionTitle?: T;
  student?: T;
  studentEmail?: T;
  studentName?: T;
  enrollment?: T;
  course?: T;
  courseTitle?: T;
  parentThread?: T;
  postType?: T;
  title?: T;
  content?: T;
  attachments?:
    | T
    | {
        file?: T;
        description?: T;
        id?: T;
      };
  status?: T;
  publishedAt?: T;
  editedAt?: T;
  isEdited?: T;
  replies?: T;
  upvotes?:
    | T
    | {
        user?: T;
        upvotedAt?: T;
        id?: T;
      };
  lastActivityAt?: T;
  isPinned?: T;
  isLocked?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "course-grade-tables_select".
 */
export interface CourseGradeTablesSelect<T extends boolean = true> {
  course?: T;
  courseTitle?: T;
  gradeLetters?:
    | T
    | {
        letter?: T;
        minimumPercentage?: T;
        id?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups_select".
 */
export interface GroupsSelect<T extends boolean = true> {
  name?: T;
  course?: T;
  parent?: T;
  path?: T;
  description?: T;
  color?: T;
  maxMembers?: T;
  isActive?: T;
  metadata?: T;
  enrollments?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-grades_select".
 */
export interface UserGradesSelect<T extends boolean = true> {
  enrollment?: T;
  user?: T;
  userEmail?: T;
  course?: T;
  courseTitle?: T;
  gradebookItem?: T;
  maxGrade?: T;
  submission?: T;
  submissionType?: T;
  baseGrade?: T;
  baseGradeSource?: T;
  adjustments?:
    | T
    | {
        type?: T;
        points?: T;
        reason?: T;
        appliedBy?: T;
        appliedAt?: T;
        isActive?: T;
        id?: T;
      };
  isOverridden?: T;
  overrideGrade?: T;
  overrideReason?: T;
  overriddenBy?: T;
  overriddenAt?: T;
  feedback?: T;
  gradedBy?: T;
  gradedAt?: T;
  submittedAt?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  meta?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "system-grade-table".
 */
export interface SystemGradeTable {
  id: number;
  gradeLetters?:
    | {
        letter: string;
        minimumPercentage: number;
        id?: string | null;
      }[]
    | null;
  /**
   * Maximum nesting depth for course categories. Leave empty for unlimited depth.
   */
  maxCategoryDepth?: number | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "system-grade-table_select".
 */
export interface SystemGradeTableSelect<T extends boolean = true> {
  gradeLetters?:
    | T
    | {
        letter?: T;
        minimumPercentage?: T;
        id?: T;
      };
  maxCategoryDepth?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
